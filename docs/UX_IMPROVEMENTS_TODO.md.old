# UX Improvements - TODO List

**Last Updated:** 2025-10-24
**Purpose:** Track progress on UX improvements identified in UX_COMPARISON.md analysis
**Status:** In Progress

---

## Overview

This document tracks the implementation of UX improvements identified by comparing the reference Apicurio plugin with our implementation. Items are organized by priority and implementation status.

**Legend:**
- ✅ **COMPLETED** - Feature implemented and tested
- 🚧 **IN PROGRESS** - Currently being worked on
- 📋 **TODO** - Planned but not started
- 🔄 **NEEDS ANALYSIS** - Requires deeper analysis before implementation
- ⏸️ **DEFERRED** - Low priority, postponed to later phase

---

## Progress Summary

| Priority | Total | Completed | In Progress | TODO |
|----------|-------|-----------|-------------|------|
| 🔴 High  | 3     | 2         | 0           | 1    |
| 🟡 Medium| 4     | 0         | 0           | 4    |
| 🟢 Low   | 3     | 0         | 0           | 3    |
| **TOTAL**| **10**| **2**     | **0**       | **8**|

**Completion:** 20% (2/10)

---

## 🔴 High Priority Items

### 1. ✅ Search Command
**Status:** ✅ **COMPLETED**
**Priority:** 🔴 HIGH
**Effort Estimate:** 4-6 hours
**Actual Effort:** ~4 hours
**Completed:** 2025-10-23

**Description:**
Multi-criteria search functionality allowing users to find artifacts by name, group, description, type, state, and labels.

**Implementation:**
- ✅ Created `src/commands/searchCommand.ts` (460 lines)
- ✅ Added search service method in `RegistryService`
- ✅ Integrated with tree view to show filtered results
- ✅ Multi-step wizard UX (search criteria → value → results)
- ✅ Type-specific inputs (dropdowns for type/state, text for others)
- ✅ Added to package.json commands and toolbar
- ✅ Automated tests created and passing

**Files Modified:**
- `src/commands/searchCommand.ts` (NEW)
- `src/services/registryService.ts` (+35 lines)
- `src/providers/registryTreeProvider.ts` (+55 lines)
- `src/extension.ts` (+5 lines)
- `package.json` (+13 lines)
- `src/test/suite/searchCommand.test.ts` (NEW, 330 lines)

**Documentation:**
- `docs/SEARCH_IMPLEMENTATION.md` - Complete implementation guide

**Reference:**
- Reference plugin: `apicurioExplorer.ts` lines 154-182

---

### 2. ✅ Create Artifact Wizard
**Status:** ✅ **COMPLETED**
**Priority:** 🔴 HIGH
**Effort Estimate:** 8-12 hours
**Actual Effort:** ~4 hours
**Completed:** 2025-10-24

**Description:**
Step-by-step wizard for creating new artifacts with group selection, type selection, file upload, and metadata entry.

**Implementation:**
- ✅ Created `src/commands/createArtifactCommand.ts` (465 lines)
- ✅ 11-step wizard workflow
- ✅ Group mode selection (new/existing)
- ✅ Artifact type selection with icons
- ✅ Smart file pattern suggestions
- ✅ Optional fields (artifact ID, version, name, description)
- ✅ Label management
- ✅ Final confirmation with summary
- ✅ V3 API integration with JSON request body
- ✅ Comprehensive error handling
- ✅ Added to package.json commands and toolbar
- ✅ Test artifacts created for manual testing

**Files Modified:**
- `src/commands/createArtifactCommand.ts` (NEW, 465 lines)
- `src/models/registryModels.ts` (+70 lines)
- `src/services/registryService.ts` (+105 lines)
- `src/extension.ts` (+5 lines)
- `package.json` (+13 lines)
- `test-artifacts/sample-openapi.yaml` (NEW)
- `test-artifacts/sample-avro.avsc` (NEW)
- `test-artifacts/sample-json-schema.json` (NEW)

**Documentation:**
- `docs/CREATE_ARTIFACT_DEEP_ANALYSIS.md` (1907 lines) - Complete specification
- `docs/CREATE_ARTIFACT_IMPLEMENTATION_SUMMARY.md` - Implementation summary

**Reference:**
- Reference plugin: `apicurioExplorer.ts` lines 131-234

**Testing Status:**
- ✅ Build successful (no TypeScript errors)
- ✅ Manual testing in progress
- ⏸️ Automated tests - deferred to later

---

### 3. 📋 Context Menus
**Status:** 📋 **TODO**
**Priority:** 🔴 HIGH
**Effort Estimate:** 4-6 hours
**Target Date:** TBD

**Description:**
Right-click context menus for tree items with actions like Open, Delete, Edit State, Copy ID, etc.

**Planned Actions:**
- **Group Context Menu:**
  - Create Artifact
  - Delete Group (with confirmation)
  - Copy Group ID
  - Refresh

- **Artifact Context Menu:**
  - Open/Preview
  - Create Version
  - Edit Metadata
  - Change State
  - Delete Artifact (with confirmation)
  - Copy Artifact ID
  - Copy Full Reference (groupId:artifactId)

- **Version Context Menu:**
  - Open/Preview
  - Set as Latest
  - Change State
  - Delete Version (with confirmation)
  - Copy Version
  - Download Content

**Implementation Plan:**
```json
// package.json additions
"menus": {
    "view/item/context": [
        {
            "command": "apicurioRegistry.openArtifact",
            "when": "view == apicurioRegistry && viewItem == artifact",
            "group": "1_actions@1"
        },
        {
            "command": "apicurioRegistry.deleteArtifact",
            "when": "view == apicurioRegistry && viewItem == artifact",
            "group": "2_dangerous@1"
        }
    ]
}
```

**Files to Modify:**
- `package.json` - Add context menu definitions
- `src/providers/registryTreeProvider.ts` - Add contextValue to tree items
- Create new command files:
  - `src/commands/deleteArtifactCommand.ts`
  - `src/commands/editMetadataCommand.ts`
  - `src/commands/changeStateCommand.ts`
  - `src/commands/copyIdCommand.ts`
- `src/extension.ts` - Register new commands

**Reference:**
- Reference plugin: `package.json` menus section

**Dependencies:**
- Should be implemented after "Add Version" command for complete CRUD

---

## 🟡 Medium Priority Items

### 4. 📋 Add Version Command
**Status:** 📋 **TODO**
**Priority:** 🟡 MEDIUM
**Effort Estimate:** 4-6 hours
**Target Date:** TBD

**Description:**
Upload new version workflow for existing artifacts.

**Workflow:**
1. Select artifact from tree (or command palette)
2. Enter version number (optional, auto-increment)
3. Search for file (with smart patterns based on artifact type)
4. Select file from results
5. Enter version name (optional)
6. Enter version description (optional)
7. Add labels (optional)
8. Confirm and create

**API Endpoint:**
- `POST /groups/{groupId}/artifacts/{artifactId}/versions`

**Implementation Plan:**
```typescript
// src/commands/addVersionCommand.ts
export async function addVersionCommand(
    registryService: RegistryService,
    treeProvider: RegistryTreeDataProvider,
    artifactNode?: RegistryItem
): Promise<void>
```

**Files to Create:**
- `src/commands/addVersionCommand.ts`

**Files to Modify:**
- `src/models/registryModels.ts` - Add CreateVersionRequest interface
- `src/services/registryService.ts` - Add createVersion() method
- `package.json` - Add command and menu items
- `src/extension.ts` - Register command

**Reference:**
- Reference plugin: `apicurioExplorer.ts` lines 234-297

**Dependencies:**
- Requires context menus to invoke from artifact nodes

---

### 5. 📋 Custom SVG Icons
**Status:** 📋 **TODO**
**Priority:** 🟡 MEDIUM
**Effort Estimate:** 2-3 hours
**Target Date:** TBD

**Description:**
Replace ThemeIcon artifact type icons with custom SVG icons for more distinctive, professional look.

**Approach:**
Hybrid approach - use custom SVGs for artifact types, keep ThemeIcon state indicators.

**Implementation Plan:**
1. Copy SVG icon files from reference plugin
2. Create `resources/icons/dark/` and `resources/icons/light/` directories
3. Update `IconService.getIconForArtifactType()` to return Uri instead of ThemeIcon
4. Keep emoji state indicators in descriptions
5. Update webpack config to include icon resources

**Files to Add:**
```
resources/icons/
├── dark/
│   ├── asyncapi.svg
│   ├── avro.svg
│   ├── graphql.svg
│   ├── json.svg
│   ├── kconnect.svg
│   ├── openapi.svg
│   ├── protobuf.svg
│   ├── wsdl.svg
│   ├── xml.svg
│   └── xsd.svg
└── light/
    └── (same files)
```

**Files to Modify:**
- `src/services/iconService.ts` - Update getIconForArtifactType()
- `webpack.config.js` - Include icon files in bundle
- `package.json` - Update extension packaging

**Reference:**
- Reference plugin: `/resources/` directory

**Dependencies:**
- None - can be done independently

---

### 6. 📋 User Preference Settings
**Status:** 📋 **TODO**
**Priority:** 🟡 MEDIUM
**Effort Estimate:** 2-3 hours
**Target Date:** TBD

**Description:**
Add configuration options for user preferences like name display, version order, search limits.

**Settings to Add:**
```json
{
    "apicurioRegistry.display.useArtifactNames": {
        "type": "boolean",
        "default": false,
        "description": "Display artifact names instead of IDs in tree view"
    },
    "apicurioRegistry.display.reverseVersionOrder": {
        "type": "boolean",
        "default": false,
        "description": "Show newest versions first (default: oldest first)"
    },
    "apicurioRegistry.search.defaultLimit": {
        "type": "number",
        "default": 50,
        "minimum": 1,
        "maximum": 1000,
        "description": "Maximum number of search results to return"
    },
    "apicurioRegistry.display.showArtifactCounts": {
        "type": "boolean",
        "default": true,
        "description": "Show artifact counts in group labels"
    },
    "apicurioRegistry.display.truncateDescriptions": {
        "type": "boolean",
        "default": true,
        "description": "Truncate long descriptions in tree view"
    },
    "apicurioRegistry.display.truncateLength": {
        "type": "number",
        "default": 30,
        "minimum": 10,
        "maximum": 100,
        "description": "Maximum length for truncated descriptions"
    }
}
```

**Implementation Plan:**
1. Add settings to `package.json` contributes.configuration
2. Update `RegistryTreeDataProvider` to read and apply settings
3. Add setting change listener to refresh tree when settings change
4. Update `searchArtifactsCommand` to use default limit setting

**Files to Modify:**
- `package.json` - Add configuration schema
- `src/providers/registryTreeProvider.ts` - Read and apply settings
- `src/commands/searchCommand.ts` - Use default limit

**Reference:**
- Reference plugin: `package.json` configuration section

**Dependencies:**
- None - can be done independently

---

### 7. 📋 Delete Operations
**Status:** 📋 **TODO**
**Priority:** 🟡 MEDIUM
**Effort Estimate:** 3-4 hours
**Target Date:** TBD

**Description:**
Delete operations for groups, artifacts, and versions with confirmation dialogs.

**Operations:**
1. **Delete Group** - Remove entire group and all artifacts
2. **Delete Artifact** - Remove artifact and all versions
3. **Delete Version** - Remove specific version (with safeguards)

**Implementation Plan:**
```typescript
// src/commands/deleteCommand.ts
export async function deleteGroupCommand(
    registryService: RegistryService,
    treeProvider: RegistryTreeDataProvider,
    groupNode: RegistryItem
): Promise<void>

export async function deleteArtifactCommand(
    registryService: RegistryService,
    treeProvider: RegistryTreeDataProvider,
    artifactNode: RegistryItem
): Promise<void>

export async function deleteVersionCommand(
    registryService: RegistryService,
    treeProvider: RegistryTreeDataProvider,
    versionNode: RegistryItem
): Promise<void>
```

**Confirmation Dialogs:**
- Show item details (ID, name, description)
- Show dependent items (e.g., artifacts in group, versions in artifact)
- Require explicit confirmation
- Warning for destructive actions

**Files to Create:**
- `src/commands/deleteCommand.ts`

**Files to Modify:**
- `src/services/registryService.ts` - Add delete methods
- `package.json` - Add commands and context menus
- `src/extension.ts` - Register commands

**Reference:**
- Reference plugin: `apicurioExplorer.ts` delete logic

**Dependencies:**
- Should be implemented with context menus (#3)

---

## 🟢 Low Priority Items

### 8. ⏸️ Details Panel (Optional)
**Status:** ⏸️ **DEFERRED**
**Priority:** 🟢 LOW
**Effort Estimate:** 6-8 hours
**Target Date:** Phase 3/4

**Description:**
Optional hybrid approach: keep hierarchical tree + add Details panel that shows metadata when item selected.

**Design:**
```
┌────────────────────────────────────────┐
│ 🔌 Apicurio Registry                   │
│ ├─ 📁 com.example (2)                  │
│ │  └─ 🔷 UserAPI ✓                     │  ← Selected
│ └─ 📁 org.acme (1)                     │
├────────────────────────────────────────┤
│ ℹ️ Details                              │
│ ┌──────────────────────────────────────┐│
│ │ UserAPI                              ││
│ │                                      ││
│ │ Type: OPENAPI                        ││
│ │ State: ENABLED                       ││
│ │ Description: User management API     ││
│ │                                      ││
│ │ Created: 2025-10-20 10:30 AM         ││
│ │ Modified: 2025-10-23 3:45 PM         ││
│ │ Owner: admin                         ││
│ │                                      ││
│ │ Labels:                              ││
│ │   - env: production                  ││
│ │   - team: backend                    ││
│ └──────────────────────────────────────┘│
└────────────────────────────────────────┘
```

**Implementation:**
- Add new tree view in package.json
- Create `src/providers/detailsTreeProvider.ts`
- Listen to selection events in main tree
- Update details panel when selection changes
- Show edit button for metadata

**Rationale for Deferral:**
- Current rich tooltips provide adequate metadata display
- Adds complexity without major UX gain at this stage
- Better to focus on missing CRUD operations first
- Can revisit in Phase 3 when focusing on polish

**Reference:**
- Reference plugin: Multi-panel design (apicurioMetasExplorer)

---

### 9. ⏸️ Reverse Version Order Toggle
**Status:** ⏸️ **DEFERRED**
**Priority:** 🟢 LOW
**Effort Estimate:** 1-2 hours
**Target Date:** With User Preferences (#6)

**Description:**
Toolbar toggle button to reverse version sort order (newest first vs oldest first).

**Implementation:**
Option 1: Toolbar button
```json
{
    "command": "apicurioRegistry.toggleVersionOrder",
    "title": "Reverse Version Order",
    "icon": "$(arrow-swap)"
}
```

Option 2: Integrated with user preferences (#6)
- Use `apicurioRegistry.display.reverseVersionOrder` setting
- No toolbar button needed
- Users set preference in settings

**Recommendation:**
Implement as part of User Preferences (#6) rather than separate command.

**Reference:**
- Reference plugin: `apicurioVersionsExplorer.reverseDisplay` command

---

### 10. ⏸️ Edit Metadata UI
**Status:** ⏸️ **DEFERRED**
**Priority:** 🟢 LOW
**Effort Estimate:** 4-5 hours
**Target Date:** Phase 3

**Description:**
Dedicated UI for editing artifact metadata (name, description, labels).

**Workflow:**
1. Right-click artifact → "Edit Metadata"
2. Show webview or multi-step wizard
3. Edit name, description, labels
4. Save changes via API

**API Endpoint:**
- `PUT /groups/{groupId}/artifacts/{artifactId}`

**Options:**
1. **Multi-step wizard** (simpler)
   - Input box for name
   - Input box for description
   - Label manager (reuse from create artifact)

2. **Webview form** (more polished)
   - HTML form with all fields
   - Real-time validation
   - Better UX but more complex

**Recommendation:**
Start with multi-step wizard, upgrade to webview in Phase 3 when adding visual editors.

**Files to Create:**
- `src/commands/editMetadataCommand.ts`

**Files to Modify:**
- `src/services/registryService.ts` - Add updateArtifact() method
- `package.json` - Add command and context menu
- `src/extension.ts` - Register command

**Reference:**
- Reference plugin: `apicurioMetasExplorer.editMetas` command

**Rationale for Deferral:**
- Lower priority than create/delete operations
- Metadata can be set during creation
- Most users don't frequently edit metadata
- Better to implement with webview in Phase 3

---

## Implementation Timeline

### ✅ Completed (Weeks 1-2)
- [x] Search Command (4 hours)
- [x] Create Artifact Wizard (4 hours)

### 📅 Next Sprint (Weeks 3-4)
- [ ] Context Menus (4-6 hours)
- [ ] Add Version Command (4-6 hours)
- [ ] Delete Operations (3-4 hours)

### 📅 Sprint 2 (Weeks 5-6)
- [ ] User Preference Settings (2-3 hours)
- [ ] Custom SVG Icons (2-3 hours)

### 📅 Phase 3 (Future)
- [ ] Edit Metadata UI (4-5 hours)
- [ ] Details Panel (6-8 hours) - if needed
- [ ] Visual Editors (per roadmap)

### ⏸️ Deferred
- [ ] Reverse Version Order Toggle (covered by preferences)

---

## Testing Checklist

### Completed Features

#### ✅ Search Command
- [x] Automated tests passing (330 lines, 100% coverage)
- [x] Manual testing completed
- [x] Documentation complete

#### ✅ Create Artifact Wizard
- [x] Build successful (no errors)
- [x] Manual testing in progress
- [x] Test artifacts created
- [ ] Automated tests (deferred)
- [x] Documentation complete

### Pending Features

#### Context Menus
- [ ] Unit tests
- [ ] Integration tests
- [ ] Manual testing
- [ ] Keyboard navigation testing
- [ ] Documentation

#### Add Version
- [ ] Unit tests
- [ ] Integration tests
- [ ] Manual testing with various file types
- [ ] Error handling tests
- [ ] Documentation

#### Delete Operations
- [ ] Unit tests
- [ ] Confirmation dialog tests
- [ ] Manual testing (delete group, artifact, version)
- [ ] Edge case testing (last version, etc.)
- [ ] Documentation

---

## Reference Materials

### Documents
- `docs/UX_COMPARISON.md` - Original analysis comparing reference plugin vs our implementation
- `docs/SEARCH_IMPLEMENTATION.md` - Search feature implementation guide
- `docs/CREATE_ARTIFACT_DEEP_ANALYSIS.md` - Create artifact specification
- `docs/CREATE_ARTIFACT_IMPLEMENTATION_SUMMARY.md` - Create artifact summary

### Reference Plugin
- Repository: `reference/apicurio-registry-vscode-plugin/`
- Main file: `src/apicurioExplorer.ts`
- Package: `package.json`

### API Documentation
- Apicurio Registry V3 REST API
- GroupsResource endpoints
- ArtifactsResource endpoints

---

## Notes & Decisions

### 2025-10-23 - Search Implementation
- Decided to adopt reference plugin's multi-step wizard UX
- Implemented V3 API integration (cleaner than V2)
- Added automated tests from the start
- Successfully integrated with existing tree view

### 2025-10-24 - Create Artifact Implementation
- Completed in ~4 hours (vs 8-12 hour estimate)
- Detailed specification document accelerated development
- Used V3 API JSON body format (better than V2 headers)
- Made artifact ID and version optional (auto-generation)
- Added rich metadata support (name, description, labels)
- Smart file pattern suggestions improve UX
- Created test artifacts for manual testing
- Automated tests deferred to later (focus on manual validation first)

### Icon Strategy Decision
- Current: ThemeIcon (adaptive, maintainable)
- Future: Consider hybrid (custom SVGs + ThemeIcon states)
- Deferred until visual polish phase

### Panel Layout Decision
- Keep single hierarchical tree (familiar VSCode pattern)
- Details panel deferred - current tooltips are sufficient
- May revisit in Phase 3 with visual editors

---

## Questions & Blockers

### Current
- None

### Resolved
- ✅ **File search pattern not finding files** - Created test-artifacts/ directory with sample files

---

## Success Metrics

### Feature Completion
- **Target:** Complete all High Priority items by end of month
- **Current:** 2/3 High Priority items completed (67%)

### Code Quality
- All features must have tests (unit + integration)
- TypeScript strict mode compliance
- No console warnings or errors
- Documentation for all public APIs

### User Experience
- Adopt proven UX patterns from reference plugin
- Maintain or improve on reference plugin workflows
- Provide better error messages and recovery
- Ensure all operations are reversible or confirmable

---

**Last Reviewed:** 2025-10-24
**Next Review:** Weekly
**Document Owner:** Development Team
